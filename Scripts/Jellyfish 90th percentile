import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os
import ephem
from datetime import datetime

# Function to calculate sun and moon altitudes given the date and time
def calculate_altitudes(year, month, day, hour, minute):
    observer = ephem.Observer()
    observer.lat, observer.lon = "52.695", "6.896"
    try:
        observer.date = datetime(year, month, day, hour, minute, 0)
    except ValueError:
        return None, None

    sun = ephem.Sun()
    sun.compute(observer)
    moon = ephem.Moon()
    moon.compute(observer)

    # Convert the altitude from radians to degrees
    sun_altitude = round(float(sun.alt) * 57.2957795)
    moon_altitude = round(float(moon.alt) * 57.2957795)
    return sun_altitude, moon_altitude

# Function to filter rows where sun and moon altitudes are above -18 degrees
def filter_sun_moon(df):
    filtered_data = []
    for _, row in df.iterrows():
        year, month, day, hour, minute = (
            int(row["Year"]), int(row["Month"]), int(row["Day"]), 
            int(row["Hour"]), int(row["Minute"])
        )
        
        # Calculate altitudes
        sun_altitude, moon_altitude = calculate_altitudes(year, month, day, hour, minute)
        
        if sun_altitude is not None and moon_altitude is not None:
            if sun_altitude != 500 and moon_altitude != -500:
                filtered_data.append(row)
    
    return pd.DataFrame(filtered_data)

# Dictionary to store processed data for each location
data_storage = {}

# Process data for each location
locations = ["Erica Winter", "Erica Summer"]
for location in locations:
    folder_path = os.path.join(r"C:\Users\Farhan\Desktop", location)
    
    # Create list to store DataFrames for each location
    dfs = []

    for filename in os.listdir(folder_path):
        if filename.endswith(".dat"):  # Only process .dat files
            file_path = os.path.join(folder_path, filename)

            # Read the data file
            df = pd.read_csv(file_path, delimiter=";", skiprows=35, 
                             names=["Date and Time", "Date and Time2", "Temperature", "Number", "Hz", "Magnitude"])
            
            # Preprocess the data
            df = df.drop(columns=["Date and Time2", "Temperature", "Number", "Hz"])
            df[["Date", "Time"]] = df["Date and Time"].str.split("T", expand=True)
            df = df[df["Magnitude"] != 0.0]
            df[["Year", "Month", "Day"]] = df["Date"].str.split("-", expand=True)
            df[["Hour", "Minute", "Second"]] = df["Time"].str.split(":", expand=True)
            df = df[["Year", "Month", "Day", "Hour", "Minute", "Magnitude"]]
            
            # Apply the filtering function
            df = filter_sun_moon(df)
            dfs.append(df)

    # Store the filtered data
    data_storage[location] = dfs

# Plot combined graph for all locations
fig, ax = plt.subplots(figsize=(12, 6))
linestyles = ['-', '--', '-.', ':']
colors = ['b', 'r', 'g', 'c', 'm', 'y', 'k', 'orange', 'teal']
all_data = pd.DataFrame(columns=['Location', 'Time', 'Magnitude'])

for i, location in enumerate(locations):
    # Retrieve filtered data for the location
    location_dfs = [df for df in data_storage[location] if not df.empty]

    # Combine 'Hour' and 'Minute' columns into a 'Time' column
    for df in location_dfs:
        df['Hour'] = df['Hour'].astype(int).apply(lambda hour: hour - 24 if hour > 9 else hour)
        df['Time'] = df['Hour'] + df['Minute'].astype(int) / 60.0
    
    # Combine data for the current location
    combined_data = pd.concat(location_dfs, ignore_index=True)
    
    # Group data by time intervals and calculate average magnitude
    time_intervals = pd.cut(combined_data['Time'], bins=np.linspace(-10, 9, num=500))
    avg_magnitude = combined_data.groupby(time_intervals, observed=False)['Magnitude'].quantile(0.9)

    # Get midpoints of time intervals
    time_midpoints = [interval.mid for interval in avg_magnitude.index.categories]

    # Plot the average magnitude for this location
    linestyle = linestyles[i % len(linestyles)]
    color = colors[i % len(colors)]
    ax.plot(time_midpoints, avg_magnitude.values, linestyle=linestyle, color=color, label=location)
    
    # Add data to all_data DataFrame for export
    location_data = pd.DataFrame({'Location': [location] * len(time_midpoints),
                                  'Time': time_midpoints,
                                  'Magnitude': avg_magnitude.values})
    all_data = pd.concat([all_data, location_data], ignore_index=True)

# Customize the plot appearance
ax.set_title("Combined Jellyfish Plot", fontsize=15)
ax.set_ylabel("NSB (mag/arcsec^2)", fontsize=14)
ax.set_xlabel("Time of the day (hours and minutes)", fontsize=14)
ax.set_xticks([-8, -6, -4, -2, 0, 2, 4, 6])
ax.set_xticklabels(["16:00", "18:00", "20:00", "22:00", "00:00", "02:00", "04:00", "06:00"])
ax.set_xlim(-8, 8)
ax.set_ylim(16, 23)
ax.grid(True)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

# Save the plot and data
output_png = 'combined_jellyfish_plot.png'
plt.savefig(output_png, dpi=300, bbox_inches='tight')
print(f"PNG file '{output_png}' saved successfully.")

# Export the combined data to Excel
excel_filename = 'combined_data.xlsx'
all_data.to_excel(excel_filename, index=False)
print(f"Excel file '{excel_filename}' saved successfully.")

# Display the plot
plt.tight_layout()
plt.show()
